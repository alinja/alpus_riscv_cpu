#!/usr/bin/env python3

#Workaround for Quartus13 bug, cannot initialize memory with write enables

import sys

memawid=13
memsize=2**memawid
cols=16
b=[[],[],[],[]]

def print_header(name, len, wid):
    print(f"-- generated by makevhdl.py")
    print(f"library ieee;")
    print(f"use ieee.std_logic_1164.all;")
    print(f"library work;")
    print(f"use work.alpus_riscv_cpu_pkg.all;")
    print(f"package {name}_pkg is")
    print(f"    type {name}_t is array (0 to {int(len/4-1)}) of std_logic_vector({wid-1} downto 0);")
    print(f"    type {name}_byte_t is array (0 to {int(len/4-1)}) of std_logic_vector({int(wid/4-1)} downto 0);")
    print(f"    constant {name}_t_addr_width : natural := {memawid};")

def print_mem(name, len):
    print(f"    constant {name} : {name}_t := (")
    idx=0;
    str=''
    for i in range(0, int(len/4)):
        str += f'x"{b[3][idx]}{b[2][idx]}{b[1][idx]}{b[0][idx]}"'
        if i != int(len/4)-1:
            str += f', '
            if idx%cols==cols-1:
                str += '\n'
        idx += 1
    print(str)
    print(f"    );")
    
def print_memb(name, typename, byte, len):
    #print(f"    constant {name}_b{byte} : {name}_byte_t := (")
    print(f"    constant {name}_b{byte} : {typename} := (")
    idx=0;
    str=''
    for i in range(0, int(len/4)):
        str += f'x"{b[byte][idx]}"'
        if i != int(len/4)-1:
            str += f', '
            if idx%cols==cols-1:
                str += '\n'
        idx += 1
    print(str)
    print(f"    );")
    
def print_footer(name):
    print("end package;")


with open(sys.argv[1], "rb") as f:
    idx = 0
    while idx < memsize:
        byte = f.read(1)
        if not byte:
            byte = [0]
        data = "{:02X}".format(byte[0])
        #print(idx, data)
        b[idx%4].append(data)
        idx=idx+1


name=sys.argv[2]
print_header(name, memsize, 32)
print_mem(name, memsize)
print_memb(name, 'alpus_riscv_cpu_bytemem_t', 0, memsize)
print_memb(name, 'alpus_riscv_cpu_bytemem_t', 1, memsize)
print_memb(name, 'alpus_riscv_cpu_bytemem_t', 2, memsize)
print_memb(name, 'alpus_riscv_cpu_bytemem_t', 3, memsize)
print_footer(name)
